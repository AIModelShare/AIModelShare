import boto3
import pandas as pd
import os
from io import BytesIO
import pickle
import numpy as np
import json
import onnxruntime as rt
import warnings
import six
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
import keras_preprocessors

def get_model_onnx(runtimemodel_s3_filename="runtime_model.onnx"):
  s3 = boto3.resource("s3")
  bucket = s3.Bucket("{0}")

  with open("/tmp/runtime_model.onnx", "wb") as modelfo:
      bucket.download_fileobj("{1}/runtime_model.onnx",  modelfo)
      model = rt.InferenceSession("/tmp/runtime_model.onnx")
  return model




def get_preprocessor(preprocessor_s3_filename="runtime_preprocessor.pkl"):
      s3 = boto3.resource("s3")
      bucket = s3.Bucket("{0}")

      with open("/tmp/runtime_preprocessor.pkl", "wb") as preprocessorfo:
          bucket.download_fileobj("{1}/runtime_preprocessor.pkl",  preprocessorfo)
          preprocessorfo.seek(0)
          preprocessor = pickle.load(open("/tmp/runtime_preprocessor.pkl","rb"))
      return preprocessor

def get_runtimedata(runtimedata_s3_filename="runtime_data.json"):

      s3 = boto3.resource('s3')
      obj = s3.Object("{0}", "{1}"+"/"+runtimedata_s3_filename)
      runtime_data = json.load(obj.get()['Body'])

      return runtime_data


runtime_data=get_runtimedata(runtimedata_s3_filename="runtime_data.json")

preprocessor_type=runtime_data["runtime_preprocessor"]

runtime_model=runtime_data["runtime_model"]["name"]

model=get_model_onnx(runtimemodel_s3_filename='runtime_model.onnx')

# Load preprocessor

try:
  assert preprocessor_type=="module"
except:
  preprocessor=get_preprocessor(preprocessor_s3_filename="runtime_preprocessor.pkl")
else:
  import preprocessor

def predict(event,model,preprocessor,preprocessor_type):
    body = event["body"]
    if isinstance(event["body"], six.string_types):
        body = json.loads(event["body"])
        print(body["data"])
        bodynew = pd.Series(body["data"])
    else:
        print(body["data"])
        bodynew = pd.Series(body["data"])
        print(bodynew)
        
    sess=model
    def predict_classes(x): # adjusted from keras github code
            proba=x
            if proba.shape[-1] > 1:
              return proba.argmax(axis=-1)
            else:
              return (proba > 0.5).astype("int32")
    input_name = sess.get_inputs()[0].name

    try:
      import preprocessor as prep
      input_data = prep.preprocessor(bodynew)
    except:
      input_data = preprocessor.transform(bodynew).astype(np.float32).toarray()

    res = sess.run(None,  {{input_name: input_data}})
    prob = res[0]
    #result =predict_classes(prob)
    return prob.tolist()[0]

def handler(event, context):
    result = predict(event,model,preprocessor,preprocessor_type)
    return {{"statusCode": 200,
    "headers": {{
    "Access-Control-Allow-Origin" : "*",
    "Access-Control-Allow-Credentials": True,
    "Allow" : "GET, OPTIONS, POST",
    "Access-Control-Allow-Methods" : "GET, OPTIONS, POST",
    "Access-Control-Allow-Headers" : "*"
    }},
    "body": json.dumps(result)}}
