import boto3
import pandas as pd
import os
import numpy as np
import onnxruntime as rt
import json

def get_model_onnx(version="mostrecent"):
  fileextension='{2}'
  localFilename ="/tmp/predictionmodel_"+str(version)+fileextension

  s3 = boto3.resource("s3")
  bucket = s3.Bucket("{0}")

  with open(localFilename, "wb") as modelfo:
      bucket.download_fileobj("{1}/predictionmodel_kerasonnx_"+str(version)+".onnx",  modelfo)
  model = rt.InferenceSession(localFilename)
  return model

model=get_model_onnx(version="mostrecent")

def predict(event,model):
    body = event["body"]
    import six
    if isinstance(event["body"], six.string_types):
        body = json.loads(event["body"])
        print(body["data"])
        bodydata = pd.DataFrame.from_dict(body["data"])
    else:
        print(body["data"])
        bodydata = pd.DataFrame.from_dict(body["data"])
        print(bodydata)

    input_name = model.get_inputs()[0].name
    try:
        import preprocessor as prep
        input_data = prep.preprocessor(bodydata).astype("float32").toarray() #needs to be float32
    except:
        input_data=bodydata.astype("float32").to_array() #needs to be float32
    
    res=model.run(None,  {{input_name: input_data}})
    result = res[0].tolist()[0]

    # Generate prediction using preprocessed input data
    print("The model expects input shape:", model.get_inputs()[0].shape)
    input_name = model.get_inputs()[0].name

    res = model.run(None, {{input_name: input_data}})
  
    #extract predicted value
    
    result = res[0].tolist()[0]
    return result

def handler(event, context):
        result = predict(event,model)
        return {{"statusCode": 200,
        "headers": {
        "Access-Control-Allow-Origin" : "*",
        "Access-Control-Allow-Credentials": True,
        "Allow" : "GET, OPTIONS, POST",
        "Access-Control-Allow-Methods" : "GET, OPTIONS, POST",
        "Access-Control-Allow-Headers" : "*"
        }},
        "body": json.dumps(result)}}