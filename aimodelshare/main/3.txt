import boto3
import cv2
import os
import numpy as np
import json
import onnxruntime as rt
import base64
import imghdr
import six
from functools import partial


def get_model_onnx(version="mostrecent"):
  fileextension='{2}'
  localFilename ="/tmp/predictionmodel_"+str(version)+fileextension

  s3 = boto3.resource("s3")
  bucket = s3.Bucket("{0}")

  with open(localFilename, "wb") as modelfo:
      bucket.download_fileobj("{1}/predictionmodel_kerasonnx_"+str(version)+fileextension,  modelfo)
  model = rt.InferenceSession(localFilename)
  return model

model=get_model_onnx(version="mostrecent")


def predict(event,model):

# Load base64 encoded image stored within "data" key of event dictionary
  print(event["body"])
  body = event["body"]
  if isinstance(event["body"], six.string_types):
        body = json.loads(event["body"])
        
  bodydata=body["data"]

# Extract image file extension (e.g.-jpg, png, etc.)
  sample = base64.decodebytes(bytearray(bodydata, "utf-8"))

  for tf in imghdr.tests:
    image_file_type = tf(sample, None)
    if image_file_type:
      break;
  image_file_type=image_file_type
 
  if(image_file_type==None):
    print("This file is not an image, please submit an image base64 encoded image file.")

# Save image to local file, read into session, and preprocess image with preprocessor function

  with open("/tmp/imagetopredict."+image_file_type, "wb") as fh:
    fh.write(base64.b64decode(bodydata))

  img = cv2.imread("/tmp/imagetopredict."+image_file_type)
  
  import preprocessor as prep
  input_data = prep.preprocessor(img)

# Generate prediction using preprocessed input data
  print("The model expects input shape:", model.get_inputs()[0].shape)
  input_name = model.get_inputs()[0].name

  res = model.run(None, {{input_name: input_data}})
 
  #extract predicted value
  
  result = res[0].tolist()[0]

  os.remove("/tmp/imagetopredict."+image_file_type)

  return result

def handler(event, context):

    result = predict(event,model)
    return {{"statusCode": 200,
    "headers": {{
    "Access-Control-Allow-Origin" : "*",
    "Access-Control-Allow-Credentials": True,
    "Allow" : "GET, OPTIONS, POST",
    "Access-Control-Allow-Methods" : "GET, OPTIONS, POST",
    "Access-Control-Allow-Headers" : "*"
    }},
    "body" : json.dumps(result)}}